{"version":3,"sources":["reportWebVitals.js","assets/images/SteelDemonLogo.png","App.js","store/constants/settings.constants.js","store/reducers/settings.reducers.js","store/reducers/reducers.js","store/reducers/index.js","store/store.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","App","className","style","margin","width","padding","backgroundColor","borderRadius","src","logo","alt","maxWidth","TOGGLEDRAWER","INITIAL_STATE","isDrawerOpen","reducers","settings","state","action","type","params","persistConfig","key","storage","blacklist","whitelist","rootReducer","combineReducers","persistReducer","middleware","thunk","store","createStore","applyMiddleware","persistor","persistStore","history","createBrowserHistory","ReactDOM","render","loading","document","getElementById"],"mappings":"yKAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,+BCPC,MAA0B,2C,eCe1BQ,MAZf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,MAAO,CAACC,OAAQ,SAAUC,MAAO,IAAKC,QAAS,YAAaC,gBAAiB,UAAWC,aAAc,OAA3G,SAAmH,qBAAKC,IAAKC,EAAMC,IAAI,0BAA0BR,MAAO,CAACE,MAAO,OAAQO,SAAU,SAClM,uDACJ,uE,gDCTSC,EAAe,wBCItBC,EAAgB,CACrBC,cAAc,GCMAC,EATE,CAChBC,SDKwB,WAAoC,IAAnCC,EAAkC,uDAA1BJ,EAAeK,EAAW,uCAE1D,OAAQA,EAAOC,MAEb,KAAKP,EACH,OAAO,2BACFK,GADL,IAEEH,aAAcI,EAAOE,SAGzB,QACE,OAAOH,KEbPI,EAAgB,CACpBC,IAAK,OACLC,YACAC,UDFgB,GCGhBC,UDJgB,CAAE,aCOdC,EAAcC,YAAgBZ,GAErBa,cAAeP,EAAeK,GCPvCG,EAAa,CAACC,KAEPC,EAAQC,YAAYjB,EAAUkB,IAAe,WAAf,EAAmBJ,IACjDK,EAAYC,YAAaJ,GCGhCK,EAAUC,cAEhBC,IAASC,OACP,cAAC,IAAD,CAAUR,MAAOA,EAAjB,SACA,cAAC,IAAD,CAAaS,QAAS,KAAMN,UAAWA,EAAvC,SACC,cAAC,IAAD,CAAQE,QAAUA,EAAlB,SACC,cAAC,EAAD,UAIFK,SAASC,eAAe,SAM1BnD,M","file":"static/js/main.1aeb1512.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default __webpack_public_path__ + \"static/media/SteelDemonLogo.346f9bfa.png\";","import logo from './assets/images/SteelDemonLogo.png';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div style={{margin: '0 auto', width: 150, padding: '10px 20px', backgroundColor: '#ffffff', borderRadius: '50%'}}><img src={logo} alt=\"Cryptools by SteelDemon\" style={{width: '100%', maxWidth: 100}}/></div>\n        <h1>Welcome to Cryptools!</h1>\n\t\t\t\t<h5>Awesome features coming soon...</h5>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","export const TOGGLEDRAWER = \"settings/TOGGLEDRAWER\";","import {  \n  TOGGLEDRAWER\n} from \"../constants/settings.constants\";\n\nconst INITIAL_STATE = {\n isDrawerOpen: false\n};\n\nconst SETTINGS_REDUCER = (state = INITIAL_STATE, action) => {\n\n  switch (action.type) {    \n\n    case TOGGLEDRAWER:\n      return {\n        ...state,\n        isDrawerOpen: action.params\n      };\n\n    default:\n      return state;\n  }\n\n};\n\nexport { SETTINGS_REDUCER };\n","import { SETTINGS_REDUCER } from './settings.reducers.js'\n\nconst reducers = {\n\tsettings: SETTINGS_REDUCER,\n}\n\nconst whitelist = [ 'settings' ]\nconst blacklist = [ ]\n\nexport { whitelist, blacklist }\n\nexport default reducers","import { combineReducers } from \"redux\";\nimport { persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\"\n\nimport reducers, { blacklist, whitelist } from './reducers'\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  blacklist,\n  whitelist\n};\n\nconst rootReducer = combineReducers(reducers);\n\nexport default persistReducer(persistConfig, rootReducer);\n","import { createStore, applyMiddleware } from 'redux';\nimport { persistStore } from 'redux-persist';\nimport thunk from 'redux-thunk';\n// import logger from 'redux-logger';\n\nimport reducers from \"./reducers\";\n\n// const middleware = [thunk, logger];\nconst middleware = [thunk ];\n\nexport const store = createStore(reducers, applyMiddleware(...middleware));\nexport const persistor = persistStore(store);\n\nconst STORE_OBJECT = { store, persistor }\n\nexport default STORE_OBJECT;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Router } from \"react-router-dom\"\nimport { createBrowserHistory } from \"history\"\n\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from 'redux-persist/integration/react';\n\n\nimport App from \"./App\";\nimport { store, persistor } from \"./store/store\";\n\nconst history = createBrowserHistory();\n\nReactDOM.render(\n  <Provider store={store}>\n\t\t<PersistGate loading={null} persistor={persistor}>\n\t\t\t<Router history={ history }>\n\t\t\t\t<App />\n\t\t\t</Router>\n\t\t</PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}